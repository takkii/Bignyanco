"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-env jest */
const cp = require("child_process");
// eslint-disable-next-line import/no-extraneous-dependencies
const which = require("which");
const attach_1 = require("../attach");
try {
    which.sync('nvim');
}
catch (e) {
    // eslint-disable-next-line no-console
    console.error('A Neovim installation is required to run the tests', '(see https://github.com/neovim/neovim/wiki/Installing)');
    process.exit(1);
}
describe('Tabpage API', () => {
    let proc;
    let nvim;
    beforeAll((done) => __awaiter(this, void 0, void 0, function* () {
        proc = cp.spawn('nvim', ['-u', 'NONE', '-N', '--embed', '-c', 'set noswapfile', 'test.js'], {
            cwd: __dirname,
        });
        nvim = yield attach_1.attach({ proc });
        done();
    }));
    afterAll(() => {
        nvim.quit();
        if (proc) {
            proc.disconnect();
        }
    });
    beforeEach(() => { });
    it('gets the current Tabpage', () => __awaiter(this, void 0, void 0, function* () {
        const tabpage = yield nvim.tabpage;
        expect(tabpage).toBeInstanceOf(nvim.Tabpage);
    }));
    describe('Normal API calls', () => {
        let tabpage;
        beforeEach(() => __awaiter(this, void 0, void 0, function* () {
            tabpage = yield nvim.tabpage;
        }));
        afterAll(() => nvim.command('tabclose'));
        it('gets the current tabpage number', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield tabpage.number).toBe(1);
        }));
        it('is a valid tabpage', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield tabpage.valid).toBe(true);
        }));
        it('adds a tabpage and switches to it', () => __awaiter(this, void 0, void 0, function* () {
            nvim.command('tabnew');
            // Switch to new tabpage
            const tabpages = yield nvim.tabpages;
            expect(tabpages.length).toBe(2);
            nvim.tabpage = tabpages[tabpages.length - 1];
            const newTabPage = yield nvim.tabpage;
            expect(yield newTabPage.number).toBe(2);
        }));
        it('gets current window in tabpage', () => __awaiter(this, void 0, void 0, function* () {
            const window = yield tabpage.window;
            expect(window).toBeInstanceOf(nvim.Window);
        }));
        it('gets list of windows in tabpage', () => __awaiter(this, void 0, void 0, function* () {
            const windows = yield tabpage.windows;
            expect(windows.length).toBe(1);
            // Add a new window
            yield nvim.command('vsplit');
            const newWindows = yield tabpage.windows;
            expect(newWindows.length).toBe(2);
        }));
        it('logs an error when calling `getOption`', () => {
            const spy = jest.spyOn(tabpage.logger, 'error');
            tabpage.getOption('option');
            expect(spy.mock.calls.length).toBe(1);
            tabpage.setOption('option', 'value');
            expect(spy.mock.calls.length).toBe(2);
            spy.mockClear();
        });
        it('returns null if variable is not found', () => __awaiter(this, void 0, void 0, function* () {
            const test = yield tabpage.getVar('test');
            expect(test).toBe(null);
        }));
        it('can set a t: variable', () => __awaiter(this, void 0, void 0, function* () {
            tabpage.setVar('test', 'testValue');
            expect(yield tabpage.getVar('test')).toBe('testValue');
            expect(yield nvim.eval('t:test')).toBe('testValue');
        }));
        it('can delete a t: variable', () => __awaiter(this, void 0, void 0, function* () {
            tabpage.deleteVar('test');
            expect(yield nvim.eval('exists("t:test")')).toBe(0);
            expect(yield tabpage.getVar('test')).toBe(null);
        }));
    });
    describe('Chainable API calls', () => {
        it('gets the current tabpage number', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield nvim.tabpage.number).toBe(1);
        }));
        it('is a valid tabpage', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield nvim.tabpage.valid).toBe(true);
        }));
        it('adds a tabpage and switches to it', () => __awaiter(this, void 0, void 0, function* () {
            nvim.command('tabnew');
            // Switch to new tabpage
            const tabpages = yield nvim.tabpages;
            // TODO
            expect((yield nvim.tabpages).length).toBe(2);
            nvim.tabpage = tabpages[tabpages.length - 1];
            expect(yield nvim.tabpage.number).toBe(2);
        }));
        it('gets current window in tabpage', () => __awaiter(this, void 0, void 0, function* () {
            const window = yield nvim.tabpage.window;
            expect(window).toBeInstanceOf(nvim.Window);
        }));
        it('gets list of windows in tabpage', () => __awaiter(this, void 0, void 0, function* () {
            const windows = yield nvim.tabpage.windows;
            expect(windows.length).toBe(1);
            // Add a new window
            nvim.command('vsplit');
            // TODO
            expect((yield nvim.tabpage.windows).length).toBe(2);
        }));
    });
});
