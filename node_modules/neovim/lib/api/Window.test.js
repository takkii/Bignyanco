"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-env jest */
const cp = require("child_process");
// eslint-disable-next-line import/no-extraneous-dependencies
const which = require("which");
const attach_1 = require("../attach");
try {
    which.sync('nvim');
}
catch (e) {
    // eslint-disable-next-line no-console
    console.error('A Neovim installation is required to run the tests', '(see https://github.com/neovim/neovim/wiki/Installing)');
    process.exit(1);
}
describe('Window API', () => {
    let proc;
    let nvim;
    beforeAll((done) => __awaiter(this, void 0, void 0, function* () {
        proc = cp.spawn('nvim', ['-u', 'NONE', '-N', '--embed', '-c', 'set noswapfile', 'test.js'], {
            cwd: __dirname,
        });
        nvim = yield attach_1.attach({ proc });
        done();
    }));
    afterAll(() => {
        nvim.quit();
        if (proc) {
            proc.disconnect();
        }
    });
    beforeEach(() => { });
    it('gets the current Window', () => __awaiter(this, void 0, void 0, function* () {
        const win = yield nvim.window;
        expect(win).toBeInstanceOf(nvim.Window);
    }));
    describe('Normal API calls', () => {
        let win;
        beforeEach(() => __awaiter(this, void 0, void 0, function* () {
            win = yield nvim.window;
        }));
        it('gets the current win number', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield win.number).toBe(1);
        }));
        it('is a valid win', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield win.valid).toBe(true);
        }));
        it('gets current tabpage from window', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield win.tabpage).toBeInstanceOf(nvim.Tabpage);
        }));
        it('gets current buffer from window', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield win.buffer).toBeInstanceOf(nvim.Buffer);
        }));
        it('gets current cursor position', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield win.cursor).toEqual([1, 0]);
        }));
        it('has same cursor position after appending a line to buffer', () => __awaiter(this, void 0, void 0, function* () {
            win.buffer.append(['test']);
            expect(yield win.buffer.lines).toEqual(['', 'test']);
            expect(yield win.cursor).toEqual([1, 0]);
        }));
        it('changes cursor position', () => __awaiter(this, void 0, void 0, function* () {
            win.cursor = [2, 2];
            expect(yield win.cursor).toEqual([2, 2]);
        }));
        it('has correct height after ":split"', () => __awaiter(this, void 0, void 0, function* () {
            const currentHeight = yield win.height;
            yield nvim.command('split');
            // XXX: Not sure if this is correct, but guessing after a split we lose a row
            // due to status bar?
            expect(yield win.height).toEqual(Math.floor(currentHeight / 2) - 1);
            win.height = 5;
            expect(yield win.height).toEqual(5);
            yield nvim.command('q');
            expect(yield win.height).toEqual(currentHeight);
        }));
        it('has correct width after ":vsplit"', () => __awaiter(this, void 0, void 0, function* () {
            const width = yield win.width;
            yield nvim.command('vsplit');
            // XXX: Not sure if this is correct, but guessing after a vsplit we lose a col
            // to gutter?
            expect(yield win.width).toEqual(Math.floor(width / 2) - 1);
            win.width = 10;
            expect(yield win.width).toEqual(10);
            yield nvim.command('q');
            expect(yield win.width).toEqual(width);
        }));
        it('can get the window position', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield win.position).toEqual([0, 0]);
            expect(yield win.row).toBe(0);
            expect(yield win.col).toBe(0);
        }));
        it('has the right window positions in display cells', () => __awaiter(this, void 0, void 0, function* () {
            let windows;
            nvim.command('vsplit');
            // XXX If we re-use `win` without a new call to `nvim.window`,
            // then `win` will reference the new split
            win = yield nvim.window;
            expect(yield win.row).toBe(0);
            expect(yield win.col).toBe(0);
            windows = yield nvim.windows;
            // Set to new split
            nvim.window = windows[1];
            win = yield nvim.window;
            expect(yield win.row).toBe(0);
            expect((yield win.col) > 0).toBe(true);
            nvim.command('split');
            windows = yield nvim.windows;
            nvim.window = windows[2];
            win = yield nvim.window;
            expect((yield win.row) > 0).toBe(true);
            expect((yield win.col) > 0).toBe(true);
        }));
        it('changes window options', () => __awaiter(this, void 0, void 0, function* () {
            const list = yield win.getOption('list');
            win.setOption('list', true);
            expect(yield win.getOption('list')).toBe(true);
            win.setOption('list', false);
            expect(yield win.getOption('list')).toBe(false);
            // Restore option
            win.setOption('list', list);
            expect(yield win.getOption('list')).toBe(list);
        }));
        it('returns null if variable is not found', () => __awaiter(this, void 0, void 0, function* () {
            const test = yield win.getVar('test');
            expect(test).toBe(null);
        }));
        it('can set a w: variable', () => __awaiter(this, void 0, void 0, function* () {
            win.setVar('test', 'testValue');
            expect(yield win.getVar('test')).toBe('testValue');
            expect(yield nvim.eval('w:test')).toBe('testValue');
        }));
        it('can delete a w: variable', () => __awaiter(this, void 0, void 0, function* () {
            win.deleteVar('test');
            expect(yield nvim.eval('exists("w:test")')).toBe(0);
            expect(yield win.getVar('test')).toBe(null);
        }));
    });
    describe('Chainable API calls', () => {
        it('gets the current tabpage', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield nvim.window.tabpage).toBeInstanceOf(nvim.Tabpage);
        }));
        it('is a valid window', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield nvim.window.valid).toBe(true);
        }));
        it('gets the current buffer', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield nvim.window.buffer).toBeInstanceOf(nvim.Buffer);
        }));
        it.skip('gets current lines in buffer', () => __awaiter(this, void 0, void 0, function* () {
            expect(yield nvim.window.buffer.lines).toEqual(['test']);
        }));
    });
});
